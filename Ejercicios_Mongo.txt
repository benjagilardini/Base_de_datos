______________________________________________________________________________________________________________________________________

EJERCICIO 1
Find all movies of array directors contains item with Auguste Lumière and Louis Lumière

Query:
db.movies.find({ $and: [ {"directors": { $eq: "Auguste Lumière"}},{"directors": { $eq: "Louis Lumière"}}]}).pretty()

______________________________________________________________________________________________________________________________________

EJERCICIO 2
Find all teathers on "Bloomington" city

Query:
db.theaters.find({"location.address.city": {$eq: "Bloomington" }}).pretty()

______________________________________________________________________________________________________________________________________

EJERCICIO 3
Find all teathers on "Bloomington" city. Returns id and theaterId

Query:
db.theaters.find({'location.address.city':'Bloomington'},{_id:1,theaterId:1})

______________________________________________________________________________________________________________________________________

EJERCICIO 4
Find all comments of movie called "Pauvre Pierrot"

Query:
db.movies.aggregate([
	{'$lookup': {
		from:'comments',
		localField:'_id',
		foreignField:'movie_id',
		as:'movie_comments'
		}
	},
	{'$match':{
		'title':'Pauvre Pierrot'
		}
	}
]).pretty()

______________________________________________________________________________________________________________________________________

EJERCICIO 5
Look for movies from the first half of the 19th century

Query:
db.movies.find({year:{'$in':[1801,1850]}},{title:1,year:1}).pretty()


______________________________________________________________________________________________________________________________________

EJERCICIO 6
Find the oldest movie

Query:
db.movies.find().sort({"year":1}).limit(1).pretty()

______________________________________________________________________________________________________________________________________

EJERCICIO 7
Find number of teathers on "Bloomington" city

Query:
db.theaters.find({'location.address.city':'Bloomington'}).count()

______________________________________________________________________________________________________________________________________

EJERCICIO 8
Find number of comments of movie called "Pauvre Pierrot". _

Query:
db.movies.aggregate([
	{'$lookup': {
		from:'comments',
		localField:'_id',
		foreignField:'movie_id',
		as:'total_comments'
		}
	},
	{'$match': {'title':'Pauvre Pierrot'}
	},
	{ $project: { _id:0, title:"$title", comments:{$size:"$total_comments"}}}
])

______________________________________________________________________________________________________________________________________

EJERCICIO 9 
Find counts of comments by movies. Returns only with movie has more than 5 comments

Query:
db.movies.aggregate([	
	{'$match': {
		'num_mflix_comments':{'$gt':5}
		}
	},
	{'$project': {
		_id:0,title:'$title'
		}
	}
]).pretty()

______________________________________________________________________________________________________________________________________

EJERCICIO 10
Find number of teathers in minessota (MN)

Query:
db.theaters.aggregate([
	{'$match': {
		'location.address.state':'MN'
		}
	},
	{'$count':'Total teathers in minessota'}
])

______________________________________________________________________________________________________________________________________

EJERCICIO 11
Find the name of the person who make more comments

Query:
db.comments.aggregate([
	{'$group': {
		_id:'$name',
		'counter':{$sum:1}
		}
	},
	{'$sort': {'counter':-1}},
	{'$limit':1}])

______________________________________________________________________________________________________________________________________

EJERCICIO 12
Find the number of movies from the second half of the 19th century

Query:
db.movies.aggregate([{'$match':{year:{'$gte':1850,'$lte':1899}}},{'$count': 'Count of movies'}])

______________________________________________________________________________________________________________________________________

EJERCICIO 13
Find all comments of movie called "The Story of the Kelly Gang". Returns only the name of user

Query:
db.movies.aggregate([
	{'$lookup': {
		from:'comments',
		localField:'_id',
		foreignField:'movie_id',
		as:'total_comments'
		}
	},
	{'$match': {
		'title':'The Story of the Kelly Gang'
		}
	},
	{'$project': {
		_id: 0, 
		names:'$total_comments.name'
		}
	}
]).pretty()

______________________________________________________________________________________________________________________________________
